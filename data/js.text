
3.5 操作符：
	位操作符：
		按位非（NOT） ~
		按位与（AND）&
		按位或（OR）|
		按位异或（XOR）^
		左移 <<
		有符号右移 >>
		无符号右移 >>>

	布尔操作符：
		非（NOT）、与（AND）、或（OR）
		逻辑非（！）
		逻辑与（&&）
		逻辑或（||）

	关系操作符
		大于 >
		小于 <
		大于等于 >=
		小于等于 <=

	相等操作符
		相等操作符   ==
		不相等操作符 !=
		全等	   ===
		不全等 !==

	赋值操作符
		赋值操作符  =
		乘/赋值  *=
		除/赋值  /=
		模/赋值  %=
		加/赋值  +=
		减/赋值  -=
		左移/赋值 <<=
		有符号右移/赋值 >>=
		无符号右移/赋值 >>>=

	条件操作符
		variable = boolean_expression ? true_val : false_val
		列如：
		var max = (num1 > num2) ? num1 : num2

3.6语句
	if 语句
	do-while 语句（是一种后测试循环语句，循环体内的代码至少会被执行一次）
		do {} while ()
	while 语句（是一种前测试循环语句，条件不满足时不执行）
		while () {}
	for 语句（也是一种前测试循环语句）
	for-in 语句（是一种精准的迭代语句，可以用来枚举对象的属性）
		for (var proname in prolist) { console.log(proname) }
		(建议使用for-in循环之前，先检测确认该对象的值不为null或unddefined)
	label 语句  
	break 和 continue 语句
		（用于在循环中精确的控制代码的执行。其中break语句会立即退出循环强制继续执行循环后面的语句；continue语句也是立即退出循环，但退出循环后会从循环的顶部继续执行 -- 跳出不成立的继续循环）
	with 语句（简化多次编写同一个对象的工作）
		（大量使用导致性能下降，不建议使用；严格模式不能使用）
	switch 语句（简化版的复杂if语句）
		（在比较值是使用的是全等，不会发生类型转换）

3.7 ECMAScript　函数
	特点：　　命名的参数只提供便利，但不是必需品；
				（没有传递值的命名参数将自动被赋予undefined值；所有参数传递的都是值，不可能通过引用传递参数；通过arguments对象访问函数参数；）
			没有重载（同名函数函数名字属于后定义）；

4.1 基本类型和引用类型的值
	基本类型值指的是简单的数据段；
	引用类型值是保存在内存中的对象。（js不能直接操作对象的内存空间，实际是操作对象的引用而不是实际的对象。引用类型的值是按引用访问的。）

	typeof 操作符是确定一个变量是字符串、数字、布尔值还是undefined的最佳工具
	检测引用类型值和Object构造函数时，instanceof操作符始终会还回true

5. 引用类型
	在ECMAScript中，引用类型是一种数据结构，用于将数据和功能组织在一起。
	引用类型的值（对象）是引用类型的一个实例。

	5.1 Object 类型

	5.2 Array 类型 
		检测数组 Array.isArray(val)

		转换方法(所有对象都具有)
			toLocaleString()
			toString() -- 返回由数组中的每个值的字符串形式拼接而成的一个以逗号分隔的字符串
			valueOf() -- 返回的还是数组
			join() -- 仅接收一个参数，即用作分隔符的字符串，然后返回包含所有数组的字符串
				不输入参数或输入undefined,则使用逗号作为分隔符
			如果数组中某一项为null或undefined，那么值在toLocaleString()，toString()，valueOf()，join()方法返回的结果中以空字符串表示

		栈方法
			栈是一种LIFO（后进先出）的数据结构
			push() 方法可以接收任意数量的参数，把它们逐个添加到数组的末尾，并返回修改后的数组的长度
			pop() 方法取得数组的最后一项

		队列方法
			队列数据结构的访问规则是FIFO（先进先出）
			shift() 方法移除数组中的第一项并返回该项，同时数组长度减1
			unshift() 方法在数组前端添加任意项并返回新数组的长度

			push() 末尾添加，shift() 前端移除
			unshift() 前端添加，pop() 末尾移除

		重排序方法
			reverse() 方法是反转数组顺序，返回排序之后的数组
			sort() 方法默认情况下，该方法按升序排列数组项；即最小值在最前面，最大值排最后面，返回排序之后的数组
				为了实现排序，该方法会调用 toString()转型方法
				可以接收一个比较函数作为参数
				function compare(val1,val2){
					if(val1 > val2){ 
						return 1 // 升序  反值降序
					} else if(val1 < val2){ 
						return -1 
					} else {
						return 0
					}
				}//该比较函数可适用于大多数数据类型 // 升序
				function compare(val1,val2){
					return val2 - val1 //降序
				}

		操作方法
			concat()方法可以基于当前数组中的所有项创建一个新数组，原数组不变；无参数时，仅复制当前数组
			slice()方法可以基于当前数组中的一个或多个创建一个新数组，原数组不变；可接收一个或两个参数
				slice(start，end)返回起始位置和结束位置之间的项，不包括结束位置的项；
				slice(start)返回从该参数指定位置开始到当前数组末尾的所有项；
				参数可为负数，等价于该数组的长度加负值
			splice()方法算是最强大的数组方法，返回新数组
				删除：splice(0,2)会删除数组中的前两项
				插入：splice(2,0,'aa','bb','ccc')会从当前数组的位置2开始插入字符串'aa','bb','ccc'
				替换：splice(2,1,'aa')会删除该数组位置2的项,再从位置2开始插入字符串'aa'

		位置方法
			indexOf()
			lastIndexOf()

		迭代方法
			every()：所有项为true,则返回true
			filter():返回true项组成的数组
			forEach():没有返回值，本质上与for循环迭代数组一样
			map():返回每次函数调用的结果组成的数组
			some():某一项为true,则返回true
				以上方法都不会修改数组中包含的值。
				every()和some()最相似，用于查询数组中的项是否满足某个条件。every()传入的函数每一项为true,则返回true。而some()传入的某一项为true,则返回true

		缩小方法
			reduce()：从数组的第一项开始，逐个遍历到最后
			reduceRight()：从数组的最后一项开始，逐个向前遍历到第一项
			reduce(function(prev,cur,index,array){
				return prev + cur
			})//求和

	5.3 Date类型
		Date.UTC(year,month,?date,?hours,?minutes,?seconds,?ms)
		Date.parse()

		继承的方法 (格式因浏览器差异)
			toLocalString()
			toString()

		日期格式化方法 (格式因浏览器差异)
			toDateString() 显示 星期几、月、日、年
			toTimeString() 显示 时、分、秒、时区
			toLocaleDateString() 显示 星期几、月、日、年
			toLocaleTimeString() 显示 时、分、秒
			toUTCString() 完整的UTC日期

		日期/时间组件方法(PDF 122)
			getTime()
			setTime(ms)
			getFullYear()
			getUTCFullYear()
			setFullYear(year)
			...

	5.4 RegExp类型
		g 全局匹配
		i 不区分大小写
		m 多行模式

		RegExp实例属性
			global 		布尔值，表是否设置了g标识
			ignoreCase  布尔值，表是否设置了i标识
			lastIndex 	整数，表开始搜索下一个匹配项的字符位置，从0开始
			multiline 	布尔值，表是否设置了m标识
			source 		正则表达式的字符串表示，

		RegExp实例方法
			exec()
			test():在模式与改参数匹配的情况下返回true

		RegExp构造函数属性

	5.5 Function类型
		每个函数都是Function类型的实例，与其他引用类型一样具有属性和方法。
		函数是对象，函数名实际是指向函数对象的指针，不会与某个函数绑定。
		函数通常使用函数声明语法定义
			函数表达式
			构造函数   （不推荐）

		函数声明与函数表达式
			解析器会率先读取函数声明，并使其在执行任何代码之前可用；而函数表达式，必需等解析器执行到它所在的代码行，才会真正被解释执行。
			函数声明提升

		作为值的函数
			函数名本身就是变量，所以函数也可以作为值来使用

		函数内部属性
			有两个特殊的对象
				arguments : 类数组对象，包含传入函数中的所有参数
					callee属性，该属性是个指针，指向这个arguments对象的函数
				this : this引用的是函数据以执行的环境对象
					当在网页的全局作用域时，this对象引用的是window

		函数属性和方法
		属性：
			length
			prototype
				对于ECMAScript中的引用类型而言，prototype是保存它们所有实例的真正所在
				该属性不可枚举
		非继承方法：
			apply()
			call()
				这两个方法用途都是在特定的作用域中调用函数，实际等于设置函数体内this对象的值；它们能够扩充函数赖以运行的作用域；
			bind()

		继承方法
			toLocalString()
			toString()

	5.6 基本包装类型
		引用类型和基本包装类型的主要区别就是对象的生成期

		Boolean类型

		Number类型
			toExponential(num) : 格式化数值的方法，返回以指数表示法（e表示法）表示数值的字符串形式
			toPrecision() : 表示某个数值的最合适的格式
			toFixed(num) : 按指定的小数位返回数值的字符串表示

		String类型
			继承方法：valueOf()、toLocaleString()、toString()
			属性： length
			字符方法：
				charAt(): 返回指定位置的字符
					也可使用[]访问个别字符（IE7及以下返回undefined）
				charCodeAt() 返回指定位置字符的编码
			字符串操作方法：
				concat(): 用于将一个或多个字符串拼接起来，返回拼接得到的新字符串
					实践中更多使用的还是加号操作符
				slice(star,end)、substr(star,length)、substring(star,end)
					这三个方法都返回被操作字符串的一个子字符串，都接收1或2个参数。参数1指定开始位置,其中slice()和substring()的参数2指定的是子字符串最后一个字符后面的位置，不包括end。而substr()的参数2指定的是返回的字符个数。如果没有传递第二个参数，则将字符串的长度作为结束位置。
					当参数为负值时：slice()和substr()参数1等价于参数1+字符串长度，slice()参数2等价于参数2+字符串长度，substr()参数2转换为0，substring()的两个参数都转换为0
					substr()参数为负值时，IE8及以下存在问题
				这四个方法都不会改变原字符串
			字符串位置方法
				indexOf()
				lastIndexOf()
			trim()方法，删除字符串前置及后缀的所有空格
			字符串大小写转换方法
				toLowerCase()、toLocaleLowerCase()、toUppercase()、toLocaleUpperCase()
				toLocaleLowerCase()、toLocaleUpperCase()针对特定地区的实现
			字符串的模式匹配方法
				match() : 本质与调用RegExp的exec()方法相同
					正则全局匹配时，match()返回匹配到的数组组合；exec()返回的值不变
				search() : 始终从头向后开始查找，匹配到返回1，没有返回-1
					match()和search()唯一参数，由字符串或RegExp对象指定一个正则表达式
				replace() : 两个参数，参数1：可以是一个RegExp对象或字符串(该字符串不会被转成正则表达式)；参数2：可以是一个字符串或函数。
					如果参数1为字符串，则只会替换第一个子字符串；要替换全部，需提供一个带全局标志的正则表达式。
				split() : 以指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中.
					使用正则表达式，IE8及以下会忽略捕获组
			localeCompare()方法
			formCharCode()方法
				与charCodeAt()方法相反
			HTML方法（不建议）

	5.7 单体内置对象
		Global对象
			最特别的一个对象。 所有在全局作用域中定义的属性和函数都是Global对象的属性。
			URI编码方法
				encodeURI()和encodeURIComponent()方法可以对URI进行编码，以便发送给浏览器。encodeURI()除空格之外的其他字符原封不动，encodeURIComponent()对所有非字母数字字符编码。对应的方法decodeURI()和decodeURIComponent()
			eval()方法，强大且危险
			Global()对象的属性
				特殊值：undefined、NaN、Infinity
				构造函数：Object、Array、Function、Boolean、String、Number、Date、RegExp...
			window对象

		Math对象
			Math对象的属性
				Math.E       :  自然对数的底数，即常量e的值
				Math.LN10    :  10的自然对数
				Math.LN2     :  2的自然对数
				Math.LOG2E   :  以2为低e的对数
				Math.LOG10E  :  以10为低e的对数
				Math.PI      :  π的值
				Math.SQRT1_2 :  1/2的平方根
				Math.SQRT2   :  2的平方根
			min()和max()方法
			舍入方法
				Math.ceil()	: 向上舍入
				Math.floor()：向下舍入
				Math.round()：标准舍入，四舍五入
			random()方法
				介于0和1的随机数
			其他方法 (PDF156)
				Math.abs()
				...

6. 面向对象的程序设计
	6.1 理解对象
		创建单个对象：
			早期模式：创建一个Object的实例，再添加属性和方法
			几年后：  创建对象字面量

		6.1.1 属性类型 （两种属性：数据属性和访问器属性）
			数据属性
				数据属性包含一个数据值的位置（可以读取和写入）
					四个描述其行为的特性：
						[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，默认值为true
						[[Enumberable]]:表示能否通过for-in循环返回属性，默认值为true
						[[Wriable]]：表示能否修改属性的值，默认值为true
						[[Value]]包含这个属性的数据值，默认值为undefined
					要修改属性默认的特性，必需使用Object.definProperty()方法。三个参数：属性所在的对象、属性的名字和一个描述符对象

			访问器属性
				访问器属性不包含数据值
					四个特性：
						[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，默认值为true
						[[Enumberable]]:表示能否通过for-in循环返回属性，默认值为true
						[[Get]]:在读取属性时调用的函数，默认值为undefined
						[[Set]]:在写入属性时调用的函数，默认值为undefined
					访问器属性不能直接定义，必需使用Object.definProperty()来定义

		6.1.2 定义多个属性
			Object.defineProperties()方法，该方法可通过描述符定义多个属性。
				两个参数：第一个对象是要添加和修改其属性的对象；第二个对象的属性与第一个对象要添加或修改的属性一一对应

		6.1.3 读取属性的特性
			Object.getOwnPropertyDescriptor()方法可以取得给定属性的描述符。
				两个参数：属性所在的对象和要读取其描述符的属性名称。

	6.2 创建对象
		6.2.1 工厂模式
			 该模式抽象了创建具体对象的过程

		6.2.2构造函数模式
			创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型；
			要创建新对象，必须使用new操作符。
				创建一个新对象；
				将构造函数的作用域赋给新对象；
				执行构造函数中的代码(为这个新对象添加属性)；
				返回新对象；

			将构造函数当做函数
				构造函数与其他函数的唯一区别，就在于调用它们的方式不同。

			构造函数的问题
				主要问题，就是每个方法都要在每个实例上重新创建一遍。
					function Person(name,job){
						this.name = name;
						this.obj = obj;
						this.sayName = new Function("alert(this.name)")
					}
				以这种方式创建函数，会导致不同的作用域链和标识符解析，但创建Function新实例的机制仍然是相同的。
				可通过把函数定义转移到构造函数外部解决问题
					function Person(name,job){
						this.name = name;
						this.obj = obj;
						this.sayName = sayName
					}
					function sayName（）{
						alert(this.name);
					}
				产生新问题：在全局作用域中定义的函数实际只能被某个对象调用，这让全局作用域有点名不副实。如果对象需定义多个方法，则需定义多个全局函数...可通过原型模式解决

		6.2.3 原型模式
			每个函数都有一个prototype（原型）属性，该属性是一个指针，指向一个对象
			使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。

			理解原型对象
				只要创建了一个函数，则为该函数创建一个prototype属性，该属性指向原型对象。默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。
				通过isPrototypeOf()方法确定对象之间是否存在这种关系
				Object.getPrototypeOf()返回[[Prototype]]的值
				hasOwnProperty()检测一个属性是存在于实例中，还是存在于原型中。该方法只在给定属性存在于对象实例中时，才会返回true (实例属性) ； 返回false (原型属性)

			原型与in操作符
				有两种方式使用in操作符：单独使用和在for-in（ IE8及以下有bug；枚举实例属性，可使用 Object.keys()方法代替 ； Object.getOwnPropertyNames()方法返回所有实例属性； ）循环中使用
					单独使用时，in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。
					同时使用hasOwnProperty()方法和in操作符，就可以确定该属性是存在于对象中，还是存在于原型中。

			更简单的原型语法

			原型的动态性
				实例中的指针仅指向原型，而不是指向构造函数。

			原生对象的原型

			原型对象的问题
				最大的问题是有其共享的本性所导致的
				原型中所有属性是很多实例共享的，对于函数非常合适，对于包含基本值的属性也可，然而，对于包含引用类型值的属性，问题比较突出

		6.2.4 组合使用构造函数模式和原型模式
			创建自定义类型的最常见方式，就是使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。


		6.2.5 动态原型模式
			通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。
			使用动态原型模式时，不能使用对象字面量重写原型。在已经创建了实例的情况下重写原型，会切断现有实例和新原型之间的联系。

		6.2.6 寄生构造函数模式
			可以使用其他模式的情况下，不要使用这种模式

		6.2.7 稳妥构造函数模式

	6.3 继承（ PDF 182 ）
		许多OO语言都支持两种继承方式：接口继承和实现继承。
			接口继承只继承方法签名；实现继承则继承实际的方法。
		ECMAScript只支持实现继承，主要靠原型链来实现。

		6.3.1 原型链
			原型链是实现继承的主要方法。基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。
			实现原型链的一种基本模式：
				function SuperType(){
					this.property = true;
				}
				SuperType.prototype.getSuperValue = function(){
					return this.property;
				}
				function SubType(){
					this.subproperty = false;
				}
				SubType.prototype = new SuperType();//继承了SuperType
				SubType.prototype.getSubValue = function(){
					return this.subproperty;
				}
				var instance = new SubType();
				console.log(instance.getSuperValue())// true

			别忘记默认的原型：
				所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针，指向Object.prototype 

			确定原型和实例的关系：
				第一种是使用instanceof操作符
				第二种是使用isPrototypeOf()方法

			谨慎的定义方法
				给原型添加方法的代码一定要放在替换原型的语句之后
				在通过原型链实现继承时，不能使用字面量创建原型方法。这会导致重写原型链

			原型链的问题
				最主要的问题来自包含引用类型的原型
				第二个问题是：在创建子类型的实例时，不能向超类型的构造函数传递参数

		6.3.2 借用构造函数
			在子类型构造函数的内部调用超类型构造函数

			传递参数
				相对于原型链而言，借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数

			借用构造函数的问题

		6.3.3 组合继承（也叫伪经典继承）
			指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式，是js中最常用的继承模式

		6.3.4 原型式继承

		6.3.5 寄生式继承
			寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再向真地是它做了所有工作一样返回对象。

		6.3.6 寄生组合式继承（最理想的继承范式）
			组合继承是js最常用的继承模式；但它也有不足，最大的问题是，无论在什么情况下，都会调用两次超类型构造函数；一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。
			寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。

	6.4 小结

7 函数表达式
	定义函数的方式有两种：一种是函数声明，另一种是函数表达式
		函数声明有一个重要的特征：函数声明提升

	7.1 递归
		递归函数是在一个函数通过名字调用自身的情况下构成的
			arguments.callee是一个指向正在执行的函数的指针，可使用它来实现对函数的递归调用
			function factorial(num){
				if(num <= 1){
					return 1;
				}else{
					return num * arguments.callee(num-1);
				}
			}
			严格模式下arguments.callee会导致错误，可使用命名函数表达式
			var factorial = (function f(num){
				if(num <= 1){
					return 1;
				}else{
					return num * f(num-1);
				}
			})

	7.2 闭包
		闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在函数内部创建另一个函数
		过度使用闭包会导致内存占用过多，请谨慎使用

		7.2.1 闭包与变量

			function cf(){
				var re = new Array();
				for (var i=0; i<10; i++){
					re[i] = function(){
						return i;
					}
				}
				return re;
			}

			function cf2(){
				var re = new Array();
				for (var i=0; i<10; i++){
					re[i] = function(num){
						return function(){
							return num
						}
					}(i)
				}
				return re;
			}

		7.2.2 关于this对象
			在全局函数中，this等于window,而当函数被作为某个对象的方法调用时，this等于那个对象

		7.2.3 内存泄漏

	7.3 模仿块级作用域
		JavaScript没有块级作用域的概念。

	7.4 私有变量 PDF206

















































